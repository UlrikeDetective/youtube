---
title: "youtube_ted_new_cleaning"
format: html
editor: visual
---

## Youtube - ted_new

```{r, echo = FALSE}

library(tidyverse)
library(dplyr)
library(knitr)
library(skimr)
```

You can add options to executable code like this

```{r, echo = FALSE}

ted_new <- read.csv2(".../youtube_csv/youtube_TED_2024_03_17-08_20_11.csv")
```

```{r, echo = FALSE}

head(ted_new)
colnames(ted_new)
skim(ted_new)
# str(ted_new)
#glimpse(ted_new)
#class(ted_new)
```

```{r}
# Assuming 'ted_new' is your dataframe
ted_new <- ted_new[, !colnames(ted_new) %in% c("channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount" )]

head(ted_new)
colnames(ted_new)
skim(ted_new)
```

```{r}
# Subset of publishedAtSQL into date and time

# Assuming 'ted_new' is your dataframe
ted_new$release_date <- substr(ted_new$publishedAtSQL, 1, 10)  # Extract yyyy-mm-dd
ted_new$release_time <- substr(ted_new$publishedAtSQL, 12, 19) # Extract hh:mm:ss

# Convert release_date and release_time to appropriate formats
ted_new$release_date <- as.Date(ted_new$release_date)
ted_new$release_time <- as.POSIXct(ted_new$release_time, format = "%H:%M:%S")

# Remove the original publishedAtSQL column if no longer needed
# ted_new <- ted_new[, !colnames(ted_new) %in% "publishedAtSQL"]

```

```{r}
# Extract time portion from release_time column
ted_new$release_time <- format(ted_new$release_time, "%H:%M:%S")

# Check the dataframe
head(ted_new)



```

```{r}
# Convert duration in seconds to minutes and seconds format
ted_new$duration <- sprintf("%02d:%02d", ted_new$durationSec %/% 60, ted_new$durationSec %% 60)

# Check the dataframe
head(ted_new)

```

```{r}
# remove column durationSec

ted_new <- ted_new[, !colnames(ted_new) %in% c("durationSec", "publishedAtSQL")]

head(ted_new)
skim(ted_new)
```

```{r}
library(stringr)

# Assuming 'ted_new' is your dataframe
ted_new$speakers1 <- str_extract(ted_new$videoTitle, "(?<=\\| ).*?(?= \\|| @|^)")

# Print the result
head(ted_new)


```

```{r}
library(stringr)

# Assuming 'ted_new' is your dataframe
ted_new$speakers2 <- str_extract(ted_new$videoTitle, "^(.*?):")

# Print the result
head(ted_new)

```

```{r}
# Assuming 'ted_new' is your dataframe
ted_new$speakers3 <- sub(".*\\|\\s*", "", ted_new$videoTitle)

# Replace "TED" with NA in the "speakers3" column
ted_new$speakers3 <- ifelse(ted_new$speakers3 == "TED", NA, ted_new$speakers3)

# Print the result
head(ted_new)


```

```{r}
# Assuming 'ted_new' is your dataframe
ted_new$speakers3 <- sub("@.*", "", ted_new$speakers3)

# Print the result
head(ted_new)

```

```{r}
# Get unique entries in the "speakers" column
unique_speakers3 <- unique(ted_new$speakers3)

# Print the list of unique speakers
#print(unique_speakers3)
```

```{r}
# Count NA values in the "speakers" column
na_count_speakers1 <- sum(is.na(ted_new$speakers1))

# Print the number of NA values
print(na_count_speakers1)

```

```{r}
# Count NA values in the "speakers" column
na_count_speakers2 <- sum(is.na(ted_new$speakers2))

# Print the number of NA values
print(na_count_speakers2)
```

```{r}
# get the title form the column videoTitle

library(stringr)

# Extract title from videoTitle
ted_new$title <- str_extract(ted_new$videoTitle, "^[^|]+")

# Print the result
head(ted_new)
skim(ted_new)
```

```{r}
# Assuming 'ted_new' is your dataframe
ted_new$title <- sub("@.*", "", ted_new$title)

# Print the result
head(ted_new)
```

```{r}
unique_title <- unique(ted_new$title)
#unique_title
```

```{r}
ted_new <- ted_new[, !colnames(ted_new) %in% c("speakers")]

head(ted_new)
skim(ted_new)
```

```{r}
# Remove ":" at the end of entries in the "speakers2" column
ted_new$speakers2 <- sub(":$", "", ted_new$speakers2)

# Print the updated dataframe
head(ted_new)

```

```{r}
# Combine "speakers1" and "speakers2" columns into a new column "speaker"
# ted_new$speaker <- paste(ted_new$speakers1, ted_new$speakers2, sep = "")
```

```{r}
# Combine "speakers1" and "speakers2" columns into a new column "speaker"
ted_new$speaker <- ifelse(is.na(ted_new$speakers1), ted_new$speakers2,
                           ifelse(is.na(ted_new$speakers2), ted_new$speakers1,
                                  paste(ted_new$speakers1, ted_new$speakers2, sep = "")))

# Print the updated dataframe
head(ted_new)

```

```{r}
# Create a new column "speaker_new" based on conditions
ted_new$speaker_new <- ifelse(!is.na(ted_new$speaker) & ted_new$speaker == ted_new$speakers3,
                              ted_new$speaker,
                              ifelse(is.na(ted_new$speaker) & !is.na(ted_new$speakers3),
                                     ted_new$speakers3,
                                     ifelse(is.na(ted_new$speakers3),
                                            ted_new$speaker,
                                            NA)))

# Print the result
head(ted_new)


```

```{r}
unique_speaker <- unique(ted_new$speaker)
# unique_speaker
```

```{r}
unique_speaker <- unique(ted_new$speaker)

# Print the list of unique speakers
#print(unique_speaker)
```

```{r}
ted_new <- ted_new[, !colnames(ted_new) %in% c("speakers1", "speakers2")]

head(ted_new)
skim(ted_new)
```

```{r}
ted_new <- ted_new[, !colnames(ted_new) %in% c("speaker_new")]
```

```{r}
# Trim leading and trailing whitespace from "speaker" and "speakers3" columns
ted_new$speaker <- trimws(ted_new$speaker)
ted_new$speakers3 <- trimws(ted_new$speakers3)

# Check if entries in "speaker" and "speakers3" are the same
same_speaker <- ted_new$speaker == ted_new$speakers3

# Output the first few rows of the comparison
# same_speaker

# Remove entry in "speakers3" where entries are the same
ted_new$speakers3[same_speaker] <- NA
head(ted_new)
```

```{r}
# Find rows where "speaker" is NA and "speakers3" is not NA
na_speaker_index <- is.na(ted_new$speaker) & !is.na(ted_new$speakers3)

# Replace NA values in "speaker" with corresponding values from "speakers3"
ted_new$speaker[na_speaker_index] <- ted_new$speakers3[na_speaker_index]

# Check the first 100 rows
head(ted_new, 100)

```

```{r}
# Count NA values in the "speakers" column
na_count_speaker <- sum(is.na(ted_new$speaker))

# Print the number of NA values
print(na_count_speaker)
```

```{r}
# Create a logical vector indicating entries in "speaker" with only one word
one_word_speaker <- grepl("^\\S+$", ted_new$speaker)

# Subset the dataframe to include only rows with one-word entries in "speaker"
one_word_entries <- ted_new[one_word_speaker, "speaker", drop = FALSE]

# Display the one-word entries
print(one_word_entries)

```

```{r}
# Define the row numbers and corresponding speaker names to replace
rows_to_replace <- c(45, 185, 298:306, 308, 315, 317:321, 327:333, 337, 339, 344, 346, 350, 354, 362:376, 384,539,622, 657)
new_speaker_name <- "TED"

# Replace the specified entries with "TED"
ted_new$speaker[rows_to_replace] <- new_speaker_name

# Check the modified entries
ted_new[rows_to_replace, "speaker"]

```

```{r}
head(ted_new, 100)
```

```{r}
# Split each entry in "speaker" into words
speaker_words <- strsplit(ted_new$speaker, "\\s+")

# Count the number of words in each entry
word_counts <- sapply(speaker_words, length)

# Create a logical vector indicating entries with more than three words
more_than_three_words <- word_counts > 3

# Subset the dataframe to include only rows with more than three words in "speaker"
more_than_three_entries <- ted_new[more_than_three_words, "speaker", drop = FALSE]

# Display the entries with more than three words
print(more_than_three_entries)
```

```{r}
# Define the row numbers and corresponding speaker names to replace
rows_to_replace <- c(133, 146, 154, 159,  170, 184, 188, 208, 220, 223, 226, 231, 234, 238, 240, 242, 245, 2247, 250, 254, 257, 260, 263, 269, 272, 275, 277, 280, 283, 286, 289:291, 293, 295, 297, 309:311, 313, 322, 323, 325:326, 341, 343, 355, 358:361, 377:379, 396, 397, 400, 401, 403, 406, 408:409, 411, 415, 418, 420, 423, 428, 430, 432, 435, 438, 440, 443, 446, 448, 452, 454, 457, 460, 464, 467, 472, 474, 478, 485, 489, 492, 495, 497, 502, 503, 505, 511, 514, 517, 526, 533, 535, 537, 538, 540, 541, 543, 546, 549, 550, 553, 555, 556, 559, 563, 566, 572, 580, 583, 587, 590:591, 594, 596, 600, 602, 605, 608, 899:901, 1033, 1178:1180, 1285, 1475, 1657, 1674, 1735, 1773, 1956, 2258, 2293, 2277, 2904, 2971, 3215, 3370, 3533, 3589, 3658, 3769, 3807, 3911, 3922, 3989, 4197, 4203, 4235)
new_speaker_name <- "TED"

# Replace the specified entries with "TED"
ted_new$speaker[rows_to_replace] <- new_speaker_name

# Check the modified entries
ted_new[rows_to_replace, "speaker"]
```

```{r}
# Split each entry in "speaker" into words
speaker_words <- strsplit(ted_new$speaker, "\\s+")

# Count the number of words in each entry
word_counts <- sapply(speaker_words, length)

# Create a logical vector indicating entries with more than three words
more_than_three_words <- word_counts > 3

# Subset the dataframe to include only rows with more than three words in "speaker"
more_than_three_entries <- ted_new[more_than_three_words, "speaker", drop = FALSE]

# Display the entries with more than three words
print(more_than_three_entries)
```

```{r}
head(ted_new)
```

```{r}
ted_new <- ted_new[, !colnames(ted_new) %in% c("speakers1", "speakers2", "speakers3")]

head(ted_new)
```

```{r}
# Save the dataframe as a CSV file
write.csv(ted_new, "youtube_ted_new3_2024_03_17.csv", row.names = FALSE)

```

```{r}
library(readxl)
ted_all <- read_excel("/Users/ulrike_imac_air/projects/Trial_and_error/data/Youtube/youtube_ted_2024_03_17.xlsx")
```

```{r}
ted_cleaned <- read.csv2("/Users/ulrike_imac_air/projects/Trial_and_error/data/youtube/youtube_ted_new3_2024_03_17.csv")
```

```{r}
head(ted_cleaned)
```

```{r}
library(skimr)
skim(ted_cleaned)
```
