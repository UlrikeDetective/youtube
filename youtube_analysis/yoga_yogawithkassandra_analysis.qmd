---
title: "youtube_yoga_analysis"
format: html
editor: visual
---

## Analysis - Youtube - Channel Yoga with Kassandra Part one

#### Data is from the Youtube Channel "Yoga with Kassandra".

Data scraping was on March 16th 2024 using an API via fetching the channels ID, using a node.js code.

#### Data cleaning:

Deleted columns: "channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount"

Split column publishedAtSQL into Date (release_date) and Time (release_time).

Changed durationSec - duration of video in seconds - to duration - duration of video mm:ss.

Added columns yogaSubject - Style of yoga in video - and YogaChallenge - if this video is part of a yoga challenge (series).

#### Loading libraries

```{r, echo = FALSE}

library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
library(skimr)
```

#### Loading csv file

```{r, echo = FALSE}

yoga <- read.csv("/youtube_yoga_with_kassandra_2024_03_16.csv")
```

#### Style of Analysis

```{r}
youtube_yoga_theme <- c("#fcf1ef","#f7e6e3", "#e4e4e2", "#bfae4a", "#e7d8c9","#e5babf","#e09592", "#cdd3d6", "#B6F9FF", "#78B1E5", "#5281B4", "#5e616b", "#4F5361", "#353E55", "#474844")
```

```{r}
custom_yoga_theme_nolegend <- function() {
  #theme_minimal() %+replace%  
  theme(
    # Define the overall appearance of the plot
    plot.background = element_rect(fill = "azure2"),
    panel.background = element_rect(fill = "azure2"),
    panel.grid.major = element_line(color = "azure4"),
    panel.grid.minor = element_blank(),
    
    # Define the appearance of the axes
    axis.line = element_line(color = "azure4"),
    axis.text = element_text(color = "azure4"),
    axis.title = element_text(color = "azure4", size = 12, face = "bold.italic"),
    axis.ticks = element_line(color = "azure4"),
    legend.position = "none",
    
    # Define the appearance of the plot title and subtitles
    plot.title = element_text(color = "#5281B4", size = 14, face = "bold.italic"),
    plot.subtitle = element_text(color = "#5281B4", size = 12),
    
    # Define the appearance of the plot labels
    plot.caption = element_text(color = "#5281B4", size = 10),
    plot.tag = element_text(color = "#5281B4", size = 11, face = "bold.italic"),
    
    # Remove the plot border
    panel.border = element_blank()
  )
}
```

#### First look into the dataframe

```{r, echo = FALSE}

head(yoga)
skim(yoga)
```

```{r}
colnames(yoga)
```

earliest episode, latest episode

```{r}
earliest_date <- min(yoga$release_date)
latest_date <- max(yoga$release_date)

print(paste("Earliest Date:", earliest_date))
print(paste("Latest Date:", latest_date))

```

Count of episodes, number of episodes per year, month

```{r}
yoga_videos <- yoga %>% 
  summarise(channelTitle = n()) %>%
  mutate(Message = paste("There are", channelTitle, "in the dataset"))
print(yoga_videos$Message)


```

But how many videos were released every year?

```{r}
library(dplyr)

yoga_videos <- yoga %>%
  mutate(year = lubridate::year(release_date)) %>%  # Extract year from release_date
  group_by(year) %>%
  summarise(num_videos = n())

# Calculate mean and median of videos per year
mean_videos_per_year <- mean(yoga_videos$num_videos)
median_videos_per_year <- median(yoga_videos$num_videos)

# Print the mean and median
print(paste("Mean videos per year:", mean_videos_per_year))
print(paste("Median videos per year:", median_videos_per_year))


ggplot(yoga_videos, aes(x = factor(year), y = num_videos, fill = factor(year))) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = num_videos), vjust = -0.5, color = "darkblue", size = 5, fontface = "bold") +  
  labs(x = "Year", y = "Number of Videos", title = "Number of Yoga Videos per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()  +
  scale_y_continuous(limits = c(0, max(160)))

```

video with most/least viewCount, mean, medium, viewCount per Year,

```{r}
mean(yoga$viewCount)
median(yoga$viewCount)
min(yoga$viewCount)
max(yoga$viewCount)
```

```{r}
# Subset the dataframe where viewCount is 0
entries_with_zero_views <- yoga[yoga$viewCount == 0, ]
entries_with_zero_views
```

Okay, that seems like just an add. I will delete this entry.

```{r}
# Find the index of the row with viewCount equal to 0
index_to_delete <- which(yoga$viewCount == 0)

# Remove the row at the identified index
yoga <- yoga[-index_to_delete, ]
```

```{r}
yoga_videos <- yoga %>% 
  summarise(channelTitle = n()) %>%
  mutate(Message = paste("Now, there are", channelTitle, "in the dataset"))
print(yoga_videos$Message)
```

```{r}
viewCount_mean <- round(mean(yoga$viewCount), 1)
viewCount_median <- median(yoga$viewCount)
viewCount_min <- min(yoga$viewCount)
viewCount_max <- max(yoga$viewCount)

print(paste("Mean view count:", viewCount_mean))
print(paste("Median view count:", viewCount_median))

print(paste("Minimum view count:", viewCount_min))
print(paste("Maximum view count:", viewCount_max))

entries_with_min_views <- yoga[yoga$viewCount == 1297, ]

subset_entries_with_min_views <- entries_with_min_views[, c("release_date", "yogaSubject", "duration")]

viewCount_output_format <- "Video with least view was released on: %s, Subject of video: %s, duration of video: %s"

viewCount_output <- sprintf(viewCount_output_format, subset_entries_with_min_views$release_date, 
                  subset_entries_with_min_views$yogaSubject, 
                  subset_entries_with_min_views$duration)

print(viewCount_output)
entries_with_max_views <- yoga[yoga$viewCount == 36036204, ]
subset_entries_with_max_views <- entries_with_max_views[, c("release_date", "yogaSubject", "duration")]

viewCount_output_format_max <- "Video with most view was released on: %s, Subject of video: %s, duration of video: %s"

viewCount_output_max <- sprintf(viewCount_output_format_max, subset_entries_with_max_views$release_date, 
                  subset_entries_with_max_views$yogaSubject, 
                  subset_entries_with_max_views$duration)

print(viewCount_output_max)
```

```{r}
library(dplyr)
library(ggplot2)

yoga <- yoga %>%
  mutate(year = lubridate::year(release_date))

yoga_mean <- yoga %>%
  group_by(year) %>%
  summarise(mean_count = mean(viewCount))

yoga_median <- yoga %>%
  group_by(year) %>%
  summarise(median_count = median(viewCount))

# Bar chart
bar_plot_mean <- ggplot(yoga_mean, aes(x = factor(year), y = mean_count)) +
  geom_bar(stat = "identity", fill = "#78B1E5") +
  geom_text(aes(label = round(mean_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Mean View Count", title = "Mean View Count per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(1000000)))

bar_plot_mean

bar_plot_median <- ggplot(yoga_median, aes(x = factor(year), y = median_count)) +
  geom_bar(stat = "identity", fill = "#bfae4a") +
  geom_text(aes(label = round(median_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Median View Count", title = "Median View Count per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(400000)))

bar_plot_median

```

```{r}
# Box plot
box_plot_viewCount <- ggplot(yoga, aes(x = factor(year), y = viewCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "View Count", title = "View Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_viewCount
```

```{r}
library(dplyr)

# Filter out the extreme outlier from the year 2018
yoga_filtered <- yoga %>%
  filter(!(year == 2018 & viewCount > 3500000))

# Create the box plot with filtered data
box_plot_viewCount <- ggplot(yoga_filtered, aes(x = factor(year), y = viewCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "View Count", title = "View Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_viewCount
# better, but I think I have to exclued more extreme values.
```

```{r}
# Filter out the extreme outlier with more than 2 million views
yoga_filtered <- yoga %>%
  filter(!(viewCount > 2000000))

# Create the box plot with filtered data
box_plot_viewCount <- ggplot(yoga_filtered, aes(x = factor(year), y = viewCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "View Count", title = "View Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_viewCount
```

```{r}
# Filter out the extreme outlier with more than 1 million views
yoga_filtered <- yoga %>%
  filter(!(viewCount > 1000000))

# Create the box plot with filtered data
box_plot_viewCount <- ggplot(yoga_filtered, aes(x = factor(year), y = viewCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "View Count", title = "View Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_viewCount
```

```{r}
# Filter out the extreme outlier with more than 1 million views
yoga_filtered <- yoga %>%
  filter(!(viewCount > 600000))

# Create the box plot with filtered data
box_plot_viewCount <- ggplot(yoga_filtered, aes(x = factor(year), y = viewCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "View Count", title = "View Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_viewCount
```

```{r}
library(ggplot2)

# Filter the data to include only videos with more than 1 million views
yoga_above_1m <- yoga %>%
  filter(viewCount > 1000000)

# Create a bar plot
bar_plot_above_1m <- ggplot(yoga_above_1m, aes(x = factor(year))) +
  geom_bar(fill = "#5281B4") +
  geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, color = "darkblue", size = 5, fontface = "bold") +  # Add text labels
  labs(x = "Year", y = "Number of Videos (>1M views)", title = "Videos with More Than 1 Million Views per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(25)))

bar_plot_above_1m
print(paste("Videos with more than 1 mio views:", count(yoga_above_1m)))

percent_above_1m <- round((count(yoga_above_1m) *100) / count(yoga), 1)
print(paste("Percentage of videos with more than 1 mio views:", percent_above_1m))

```

```{r}
library(ggplot2)

# Filter the data to include only videos with more than 1 million views
yoga_above_1m <- yoga %>%
  filter(viewCount > 1000000)

# Create a boxplot
box_plot_above_1m <- ggplot(yoga_above_1m, aes(x = factor(year), y = viewCount)) +
  geom_boxplot(fill = "#e7d8c9") +
  labs(x = "Year", y = "View Count", title = "Distribution of View Counts for Videos Above 1 Million Views, \n by Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_above_1m

```

```{r}
# puhhh still that one extreme outlier - lets exclude it also here!
library(ggplot2)

# Filter the data to include only videos with more than 1 million views
yoga_above_1m <- yoga %>%
  filter(viewCount > 1000000, viewCount <= 10000000)

# Create a boxplot
box_plot_above_1m <- ggplot(yoga_above_1m, aes(x = factor(year), y = viewCount)) +
  geom_boxplot(fill = "#e7d8c9") +
  labs(x = "Year", y = "View Count", title = "Distribution of View Counts for Videos Above 1 Million Views, \n by Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_above_1m
```

month, view count per length of episode

likeCount - most/least - likeCount & length, like&Count and Subject

How is the engagement changed over the years?

```{r}
likeCount_mean <- round(mean(yoga$likeCount), 1)
likeCount_median <- median(yoga$likeCount)
likeCount_min <- min(yoga$likeCount)
likeCount_max <- max(yoga$likeCount)

print(paste("Mean like count:", likeCount_mean))
print(paste("Median like count:", likeCount_median))

print(paste("Minimum like count:", likeCount_min))
print(paste("Maximum like count:", likeCount_max))

entries_with_min_likes <- yoga[yoga$likeCount == 26, ]
# Subset the dataframe to include only specific columns
subset_entries_with_min_likes <- entries_with_min_likes[, c("release_date", "yogaSubject", "duration")]
# Define the format string
likeCount_output_format <- "Video with least likes was released on: %s, Subject of video: %s, duration of video: %s"
# Format the output
likeCount_output <- sprintf(likeCount_output_format, subset_entries_with_min_likes$release_date, 
                  subset_entries_with_min_likes$yogaSubject, 
                  subset_entries_with_min_likes$duration)
# Print the formatted output
print(likeCount_output)

entries_with_max_likes <- yoga[yoga$likeCount == 585954, ]
subset_entries_with_max_likes <- entries_with_max_likes[, c("release_date", "yogaSubject", "duration")]
# Define the format string
likeCount_output_format_max <- "Video with most view was released on: %s, Subject of video: %s, duration of video: %s"
# Format the output
likeCount_output_max <- sprintf(likeCount_output_format_max, subset_entries_with_max_likes$release_date, 
                  subset_entries_with_max_likes$yogaSubject, 
                  subset_entries_with_max_likes$duration)
# Print the formatted output
print(likeCount_output_max)
```

```{r}
library(dplyr)
library(ggplot2)

yoga <- yoga %>%
  mutate(year = lubridate::year(release_date))

yoga_like_mean <- yoga %>%
  group_by(year) %>%
  summarise(mean_count = mean(likeCount))

yoga_like_median <- yoga %>%
  group_by(year) %>%
  summarise(median_count = median(likeCount))

# Bar chart
bar_plot_like_mean <- ggplot(yoga_like_mean, aes(x = factor(year), y = mean_count)) +
  geom_bar(stat = "identity", fill = "#78B1E5") +
  geom_text(aes(label = round(mean_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Mean Like Count", title = "Mean Like Count per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(19000)))

bar_plot_like_mean

bar_plot_like_median <- ggplot(yoga_like_median, aes(x = factor(year), y = median_count)) +
  geom_bar(stat = "identity", fill = "#bfae4a") +
  geom_text(aes(label = round(median_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Median Like Count", title = "Median Like Count per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(10000)))

bar_plot_like_median
```

```{r}
# Box plot
box_plot_likeCount <- ggplot(yoga, aes(x = factor(year), y = likeCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "Like Count", title = "Like Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_likeCount
```

```{r}
# Filter out the extreme outlier with more than 25.000 likes.
yoga_filtered <- yoga %>%
  filter(!(likeCount > 25000))

# Create the box plot with filtered data
box_plot_likeCount <- ggplot(yoga_filtered, aes(x = factor(year), y = likeCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "Like Count", title = "Like Count Distribution per Year with less than 25.000 likes") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_likeCount
```

```{r}
library(ggplot2)

# Filter the data to include only videos with more than 25.000 likes.
yoga_above_25 <- yoga %>%
  filter(likeCount > 25000)

# Create a bar plot
bar_plot_above_25 <- ggplot(yoga_above_25, aes(x = factor(year))) +
  geom_bar(fill = "#5281B4") +
  geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, color = "darkblue", size = 5, fontface = "bold") +  # Add text labels
  labs(x = "Year", y = "Number of Videos (>25.000 likes)", title = "Videos with More Than 25.000 likes per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(25)))

bar_plot_above_25
print(paste("Videos with more than 25.000 likes:", count(yoga_above_25)))

percent_above_25 <- round((count(yoga_above_25) *100) / count(yoga), 1)
print(paste("Percentage of videos with more than 25.000 likes:", percent_above_25))
```

```{r}
# Assuming 'yoga' is your dataframe containing the data
yoga <- yoga %>%
  mutate(ratio_view_like = round(viewCount / likeCount, 1))

yoga <- yoga[, !colnames(yoga) %in% c("percentage_view_like", "1", "2")]

yoga
```

```{r}
yoga <- yoga %>%
  mutate(percentage_view_like = round((likeCount * 100) / viewCount, 2))

#yoga <- yoga[, !colnames(yoga) %in% c("2")]

yoga
```

```{r}
ratio_view_like_mean <- round(mean(yoga$ratio_view_like), 1)
ratio_view_like_median <- median(yoga$ratio_view_like)

print(paste("Mean ratio view/like count:", ratio_view_like_mean))
print(paste("Median ratio view/like count:", ratio_view_like_median))

percentage_view_like_mean <- round(mean(yoga$percentage_view_like), 1)
percentage_view_like_median <- median(yoga$percentage_view_like)

print(paste("Mean percentage view/like count:", percentage_view_like_mean))
print(paste("Median percentage view/like count:", percentage_view_like_median))
```

```{r}
library(dplyr)
library(ggplot2)

yoga <- yoga %>%
  mutate(year = lubridate::year(release_date))

yoga_percentage_view_like_mean <- yoga %>%
  group_by(year) %>%
  summarise(mean_count = mean(percentage_view_like))

yoga_percentage_view_like_median <- yoga %>%
  group_by(year) %>%
  summarise(median_count = median(percentage_view_like))

# Bar chart
bar_plot_percentage_view_like_mean <- ggplot(yoga_percentage_view_like_mean, aes(x = factor(year), y = mean_count)) +
  geom_bar(stat = "identity", fill = "#78B1E5") +
  geom_text(aes(label = round(mean_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Mean percentage view like", title = "Mean percentage view like per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(5)))

bar_plot_percentage_view_like_mean

bar_percentage_view_like_median <- ggplot(yoga_percentage_view_like_median, aes(x = factor(year), y = median_count)) +
  geom_bar(stat = "identity", fill = "#bfae4a") +
  geom_text(aes(label = round(median_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Median percentage view like", title = "Median percentage view like per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(5)))

bar_percentage_view_like_median
```

```{r}
library(ggplot2)

# Create a scatter plot
scatter_plot <- ggplot(yoga, aes(x = viewCount, y = likeCount)) +
  geom_point(color = "#78B1E5") +
  labs(x = "View Count", y = "Like Count", title = "Correlation between View Count and Like Count")  +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

scatter_plot

```

```{r}
library(ggplot2)

# Define threshold for outliers
viewCount_threshold <- quantile(yoga$viewCount, 0.99)  # Adjust the quantile threshold as needed

# Filter out outliers
yoga_filtered <- yoga %>%
  filter(viewCount <= viewCount_threshold)

# Calculate correlation coefficient
correlation <- cor(yoga_filtered$viewCount, yoga_filtered$likeCount)

# Create a scatter plot with filtered data and correlation line
scatter_plot <- ggplot(yoga_filtered, aes(x = viewCount, y = likeCount)) +
  geom_point(color = "#78B1E5") +
  geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
  labs(x = "View Count", y = "Like Count", title = "Correlation between View Count and Like Count (Outliers Filtered)") +
  annotate("text", x = max(yoga_filtered$viewCount), y = max(yoga_filtered$likeCount), 
           label = paste("Correlation:", round(correlation, 2)), 
           hjust = 1, vjust = 1, color = "black", size = 4) +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

scatter_plot
```

commentCount - most/least - commentCount & length, comment&Count and Subject

```{r}
commentCount_mean <- round(mean(yoga$commentCount, na.rm = TRUE), 1)
commentCount_median <- median(yoga$commentCount, na.rm = TRUE)
commentCount_min <- min(yoga$commentCount, na.rm = TRUE)
commentCount_max <- max(yoga$commentCount, na.rm = TRUE)

print(paste("Mean comment count:", commentCount_mean))
print(paste("Median comment count:", commentCount_median))

print(paste("Minimum comment count:", commentCount_min))
print(paste("Maximum comment count:", commentCount_max))
```

```{r}
library(dplyr)

# Filter the data for the year 2015
yoga_2015 <- yoga %>%
  filter(lubridate::year(release_date) == 2015)

# Calculate mean and median comment counts for the year 2015
commentCount_mean_2015 <- mean(yoga_2015$commentCount, na.rm = TRUE)
commentCount_median_2015 <- median(yoga_2015$commentCount, na.rm = TRUE)

# Print the mean and median
print(paste("Mean comment count for 2015:", round(commentCount_mean_2015, 1)))
print(paste("Median comment count for 2015:", commentCount_median_2015))

# Filter the data for the year 2015
yoga_2015 <- yoga %>%
  filter(lubridate::year(release_date) == 2015)

# Count the number of missing values for commentCount in the year 2015
missing_count_2015 <- sum(is.na(yoga_2015$commentCount))

# Print the result
print(paste("Number of missing data for commentCount in 2015:", missing_count_2015))


```

```{r}
library(dplyr)
library(ggplot2)

yoga <- yoga %>%
  mutate(year = lubridate::year(release_date))

yoga_comment_mean <- yoga %>%
  group_by(year) %>%
  summarise(mean_count = mean(commentCount, na.rm = TRUE))

yoga_comment_median <- yoga %>%
  group_by(year) %>%
  summarise(median_count = median(commentCount, na.rm = TRUE))

# Bar chart
bar_plot_comment_mean <- ggplot(yoga_comment_mean, aes(x = factor(year), y = mean_count)) +
  geom_bar(stat = "identity", fill = "#78B1E5") +
  geom_text(aes(label = round(mean_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Mean Comment Count", title = "Mean Comment Count per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(1200)))

bar_plot_comment_mean

bar_plot_comment_median <- ggplot(yoga_comment_median, aes(x = factor(year), y = median_count)) +
  geom_bar(stat = "identity", fill = "#bfae4a") +
  geom_text(aes(label = round(median_count, 1)), vjust = -0.5, color = "darkblue", size = 3, fontface = "bold") +  
  labs(x = "Year", y = "Median Comment Count", title = "Median Comment Count per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(650)))

bar_plot_comment_median
```

```{r}
# Box plot
box_plot_commentCount <- ggplot(yoga, aes(x = factor(year), y = commentCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "Comment Count", title = "Comment Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_commentCount
```

```{r}
# Filter out the extreme outlier with more than 3.000 comments.
yoga_filtered <- yoga %>%
  filter(!(likeCount > 3000))

# Create the box plot with filtered data
box_plot_viewCount <- ggplot(yoga_filtered, aes(x = factor(year), y = likeCount)) +
  geom_boxplot(fill = "lightpink") +
  labs(x = "Year", y = "View Count", title = "View Count Distribution per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

box_plot_viewCount
```

```{r}
library(ggplot2)

# Filter the data to include only videos with more than 3.000 comments.
yoga_above_3000 <- yoga %>%
  filter(commentCount > 3000)

# Create a bar plot
bar_plot_above_3000 <- ggplot(yoga_above_3000, aes(x = factor(year))) +
  geom_bar(fill = "#5281B4") +
  geom_text(stat = 'count', aes(label = after_stat(count)), vjust = -0.5, color = "darkblue", size = 5, fontface = "bold") +  # Add text labels
  labs(x = "Year", y = "Number of Videos (>3.000 comments)", title = "Videos with More than 3.000 comments per Year") +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend() +
  scale_y_continuous(limits = c(0, max(15)))

bar_plot_above_3000
print(paste("Videos with more than 3.000 comments:", count(yoga_above_3000)))

percent_above_3000 <- round((count(yoga_above_3000) *100) / count(yoga), 1)
print(paste("Percentage of videos with more than 3.000 comments:", percent_above_3000))
```

```{r}
yoga <- yoga %>%
  mutate(percentage_comment_like = round((commentCount * 100) / likeCount, 2))

yoga <- yoga %>%
  mutate(percentage_comment_view = round((commentCount * 100) / viewCount, 2))
yoga
```

```{r}
percentage_comment_like_mean <- round(mean(yoga$percentage_comment_like, na.rm = TRUE), 1)
percentage_comment_like_median <- round(median(yoga$percentage_comment_like, na.rm = TRUE), 1)


print(paste("Mean percentage comment/like count:", percentage_comment_like_mean))
print(paste("Median percentage comment/like count:", percentage_comment_like_median))

percentage_comment_view_mean <- round(mean(yoga$percentage_comment_view, na.rm = TRUE), 1)
percentage_comment_view_median <- round(median(yoga$percentage_comment_view, na.rm = TRUE), 1)

print(paste("Mean percentage view/comment count:", percentage_comment_view_mean))
print(paste("Median percentage view/comment count:", percentage_comment_view_median))
```

```{r}
library(ggplot2)

viewCount_threshold <- quantile(yoga$viewCount, 0.99) 

# Filter out missing or non-finite values
yoga_filtered <- yoga %>%
  filter(!is.na(viewCount), !is.na(commentCount), is.finite(viewCount), is.finite(commentCount)) %>%
  filter(viewCount <= viewCount_threshold)

# Calculate correlation coefficient
correlation <- cor(yoga_filtered$viewCount, yoga_filtered$commentCount, use = "complete.obs")

# Create a scatter plot with filtered data and correlation line
scatter_plot <- ggplot(yoga_filtered, aes(x = viewCount, y = commentCount)) +
  geom_point(color = "#78B1E5") +
  geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
  labs(x = "View Count", y = "Comment Count", title = "Correlation between View Count and Comment Count \n (Outliers Filtered)") +
  annotate("text", x = max(yoga_filtered$viewCount), y = max(yoga_filtered$commentCount), 
           label = paste("Correlation:", round(correlation, 2)), 
           hjust = 1, vjust = 1, color = "black", size = 4) +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

scatter_plot

```

```{r}
library(ggplot2)

likeCount_threshold <- quantile(yoga$likeCount, 0.99) 

# Filter out missing or non-finite values
yoga_filtered <- yoga %>%
  filter(!is.na(likeCount), !is.na(commentCount), is.finite(likeCount), is.finite(commentCount)) %>%
  filter(likeCount <= likeCount_threshold)

# Calculate correlation coefficient
correlation <- cor(yoga_filtered$likeCount, yoga_filtered$commentCount, use = "complete.obs")

# Create a scatter plot with filtered data and correlation line
scatter_plot <- ggplot(yoga_filtered, aes(x = likeCount, y = commentCount)) +
  geom_point(color = "#78B1E5") +
  geom_smooth(method = "lm", se = FALSE, color = "red", linetype = "dashed") +
  labs(x = "Like Count", y = "Comment Count", title = "Correlation between Like Count and Comment Count \n (Outliers Filtered)") +
  annotate("text", x = max(yoga_filtered$likeCount), y = max(yoga_filtered$commentCount), 
           label = paste("Correlation:", round(correlation, 2)), 
           hjust = 1, vjust = 1, color = "black", size = 4) +
  scale_fill_manual(values = youtube_yoga_theme) +
  custom_yoga_theme_nolegend()

scatter_plot
```

episode duration per year, month

mean, median video length, shortest video, longest video

```{r}
# Convert durations to minutes
yoga$duration_minutes <- as.numeric(substr(yoga$duration, 1, 2)) + as.numeric(substr(yoga$duration, 4, 5)) / 60

# Compute mean and median
mean_duration <- round(mean(yoga$duration_minutes, na.rm = TRUE), 1)
median_duration <- round(median(yoga$duration_minutes, na.rm = TRUE), 1)

# Print mean and median durations
print(paste("Mean Duration of an episode of Yoga with Kassandra is:", mean_duration, "minutes"))
print(paste("Median Duration of an episode of Yoga with Kassandra is:", median_duration, "minutes"))
```

Video part of a challenge? video with most/least viewCount, mean, medium, view count per length of episode

yogaSubject - count per category, likeCount per category, ViewCount per Subject, Length per Subject, Year per Subject

likeCount - most/least - likeCount & length, like&Count and Subject

commentCount - most/least - commentCount & length, comment&Count and Subject

VideoCategoryID (how many Video Categories has Youtube?)

VideoCategoryLabel (how many Video Category Labels has Youtube?)
