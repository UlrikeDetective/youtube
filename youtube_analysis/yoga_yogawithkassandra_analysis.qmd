---
title: "youtube_yoga_analysis"
format: html
editor: visual
---
# Tasks
##### First look into dataset
##### insights of what is popular
#### using of different charts


## Analysis - Youtube - Channel Yoga with Kassandra

#### Data is from the Youtube Channel "Yoga with Kassandra".

Data scraping was on March 16th 2024 using an API via fetching the channels ID, using a node.js code.

#### Data cleaning:

Deleted columns: "channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount"

Split column publishedAtSQL into Date (release_date) and Time (release_time).

Changed durationSec - duration of video in seconds - to duration - duration of video mm:ss.

Added columns yogaSubject - Style of yoga in video - and YogaChallenge - if this video is part of a yoga challenge (series).

#### Loading libraries

```{r, echo = FALSE}

library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
library(skimr)
```

#### Loading csv file

```{r, echo = FALSE}

yoga <- read.csv(".../youtube_yoga_with_kassandra_2024_03_16.csv")
```

#### Style of Analysis

```{r}
youtube_yoga_theme <- c("#e5babf", "#fcf1ef", "#e7d8c9", "#cdd3d6", "#5e616b", "#4F5361", "#353E55", "#B6F9FF", "#78B1E5", "#5281B4", "#bfae4a", "#e09592", "#f7e6e3", "#e4e4e2", "#474844")
```

```{r}
custom_yoga_theme_white_nolegend <- function() {
  #theme_minimal() %+replace%  
  theme(
    # Define the overall appearance of the plot
    plot.background = element_rect(fill = "azure2"),
    panel.background = element_rect(fill = "azure2"),
    panel.grid.major = element_line(color = "azure4"),
    panel.grid.minor = element_blank(),
    
    # Define the appearance of the axes
    axis.line = element_line(color = "black"),
    axis.text = element_text(color = "black"),
    axis.title = element_text(color = "black", size = 12, face = "bold.italic"),
    axis.ticks = element_line(color = "black"),
    legend.position = "none",
    
    # Define the appearance of the plot title and subtitles
    plot.title = element_text(color = "#5281B4", size = 14, face = "bold.italic"),
    plot.subtitle = element_text(color = "#5281B4", size = 12),
    
    # Define the appearance of the plot labels
    plot.caption = element_text(color = "black", size = 10),
    plot.tag = element_text(color = "black", size = 11, face = "bold.italic"),
    
    # Remove the plot border
    panel.border = element_blank()
  )
}
```

#### First look into the dataframe

```{r, echo = FALSE}

head(yoga)
skim(yoga)
```

```{r}
colnames(yoga)
```

earliest episode, latest episode

```{r}
# Assuming your dataframe is named yoga
earliest_date <- min(yoga$release_date)
latest_date <- max(yoga$release_date)

# Print the results
print(paste("Earliest Date:", earliest_date))
print(paste("Latest Date:", latest_date))

```

Count of episodes, number of episodes per year, month

```{r}
yoga_videos <- yoga %>% 
  summarise(channelTitle = n()) %>%
  mutate(Message = paste("There are", channelTitle, "in the dataset"))
print(yoga_videos$Message)


```

video with most/least viewCount, mean, medium, viewCount per Year, month, view count per length of episode

```{r}
mean(yoga$viewCount)
median(yoga$viewCount)
min(yoga$viewCount)
max(yoga$viewCount)
```

```{r}
# Subset the dataframe where viewCount is 0
entries_with_zero_views <- yoga[yoga$viewCount == 0, ]
entries_with_zero_views
```

```{r}
# Find the index of the row with viewCount equal to 0
index_to_delete <- which(yoga$viewCount == 0)

# Remove the row at the identified index
yoga <- yoga[-index_to_delete, ]
```

```{r}
yoga_videos <- yoga %>% 
  summarise(channelTitle = n()) %>%
  mutate(Message = paste("There are", channelTitle, "in the dataset"))
print(yoga_videos$Message)
```

```{r}
viewCount_mean <- round(mean(yoga$viewCount), 1)
viewCount_median <- median(yoga$viewCount)
viewCount_min <- min(yoga$viewCount)
viewCount_max <- max(yoga$viewCount)

print(paste("Mean view count:", viewCount_mean))
print(paste("Median view count:", viewCount_median))

print(paste("Minimum view count:", viewCount_min))
print(paste("Maximum view count:", viewCount_max))

entries_with_min_views <- yoga[yoga$viewCount == 1297, ]
# Subset the dataframe to include only specific columns
subset_entries_with_min_views <- entries_with_min_views[, c("release_date", "yogaSubject", "duration")]
# Define the format string
viewCount_output_format <- "Video with least view was released on: %s, Subject of video: %s, duration of video: %s"
# Format the output
viewCount_output <- sprintf(viewCount_output_format, subset_entries_with_min_views$release_date, 
                  subset_entries_with_min_views$yogaSubject, 
                  subset_entries_with_min_views$duration)
# Print the formatted output
print(viewCount_output)
entries_with_max_views <- yoga[yoga$viewCount == 36036204, ]
subset_entries_with_max_views <- entries_with_max_views[, c("release_date", "yogaSubject", "duration")]
# Define the format string
viewCount_output_format_max <- "Video with most view was released on: %s, Subject of video: %s, duration of video: %s"
# Format the output
viewCount_output_max <- sprintf(viewCount_output_format_max, subset_entries_with_max_views$release_date, 
                  subset_entries_with_max_views$yogaSubject, 
                  subset_entries_with_max_views$duration)
# Print the formatted output
print(viewCount_output_max)
```

likeCount - most/least - likeCount & length, like&Count and Subject

```{r}
likeCount_mean <- round(mean(yoga$likeCount), 1)
likeCount_median <- median(yoga$likeCount)
likeCount_min <- min(yoga$likeCount)
likeCount_max <- max(yoga$likeCount)

print(paste("Mean like count:", likeCount_mean))
print(paste("Median like count:", likeCount_median))

print(paste("Minimum like count:", likeCount_min))
print(paste("Maximum like count:", likeCount_max))

entries_with_min_likes <- yoga[yoga$likeCount == 26, ]
# Subset the dataframe to include only specific columns
subset_entries_with_min_likes <- entries_with_min_likes[, c("release_date", "yogaSubject", "duration")]
# Define the format string
likeCount_output_format <- "Video with least likes was released on: %s, Subject of video: %s, duration of video: %s"
# Format the output
likeCount_output <- sprintf(likeCount_output_format, subset_entries_with_min_likes$release_date, 
                  subset_entries_with_min_likes$yogaSubject, 
                  subset_entries_with_min_likes$duration)
# Print the formatted output
print(likeCount_output)

entries_with_max_likes <- yoga[yoga$likeCount == 585954, ]
subset_entries_with_max_likes <- entries_with_max_likes[, c("release_date", "yogaSubject", "duration")]
# Define the format string
likeCount_output_format_max <- "Video with most view was released on: %s, Subject of video: %s, duration of video: %s"
# Format the output
likeCount_output_max <- sprintf(likeCount_output_format_max, subset_entries_with_max_likes$release_date, 
                  subset_entries_with_max_likes$yogaSubject, 
                  subset_entries_with_max_likes$duration)
# Print the formatted output
print(likeCount_output_max)
```

commentCount - most/least - commentCount & length, comment&Count and Subject

```{r}
commentCount_mean <- round(mean(yoga$commentCount, na.rm = TRUE), 1)
commentCount_median <- median(yoga$commentCount, na.rm = TRUE)
commentCount_min <- min(yoga$commentCount, na.rm = TRUE)
commentCount_max <- max(yoga$commentCount, na.rm = TRUE)

print(paste("Mean comment count:", commentCount_mean))
print(paste("Median comment count:", commentCount_median))

print(paste("Minimum comment count:", commentCount_min))
print(paste("Maximum comment count:", commentCount_max))

# Print only entries with valid values
valid_entries <- !is.na(subset_entries_with_min_comment$release_date) &
                 !is.na(subset_entries_with_min_comment$yogaSubject) &
                 !is.na(subset_entries_with_min_comment$duration)
if (any(valid_entries)) {
  print(commentCount_output[valid_entries])
}

# Print only entries with valid values for max comments
valid_entries_max <- !is.na(subset_entries_with_max_comment$release_date) &
                     !is.na(subset_entries_with_max_comment$yogaSubject) &
                     !is.na(subset_entries_with_max_comment$duration)
if (any(valid_entries_max)) {
  print(commentCount_output_max[valid_entries_max])
}


```

episode duration per year, month

mean, median video length, shortest video, longest video

```{r}
# Convert durations to minutes
yoga$duration_minutes <- as.numeric(substr(yoga$duration, 1, 2)) + as.numeric(substr(yoga$duration, 4, 5)) / 60

# Compute mean and median
mean_duration <- round(mean(yoga$duration_minutes, na.rm = TRUE), 1)
median_duration <- round(median(yoga$duration_minutes, na.rm = TRUE), 1)

# Print mean and median durations
print(paste("Mean Duration of an episode of Yoga with Kassandra is:", mean_duration, "minutes"))
print(paste("Median Duration of an episode of Yoga with Kassandra is:", median_duration, "minutes"))
```

Video part of a challenge? video with most/least viewCount, mean, medium, view count per length of episode

yogaSubject - count per category, likeCount per category, ViewCount per Subject, Length per Subject, Year per Subject

likeCount - most/least - likeCount & length, like&Count and Subject

commentCount - most/least - commentCount & length, comment&Count and Subject

VideoCategoryID (how many Video Categories has Youtube?)

VideoCategoryLabel (how many Video Category Labels has Youtube?)
