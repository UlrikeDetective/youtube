---
title: "youtube_arteconcert_cleaning"
format: html
editor: visual
---

## Youtube - Arte Concert

```{r, echo = FALSE}

library(readcsv)
library(tidyverse)
library(dplyr)
library(knitr)
```

You can add options to executable code like this

```{r, echo = FALSE}

yoga <- read.csv(".../youtube_arteconcert_2024_03_17-08_07_33.csv")
```

```{r, echo = FALSE}

head(yoga)
colnames(yoga)
skim(yoga)
# str(yoga)
#glimpse(yoga)
#class(yoga)
```

```{r}
# Deleting Columns
yoga <- yoga[, !colnames(yoga) %in% c("channelId", "publishedAt", "position", "duration", "dimension", "definition", "defaultLanguage", "thumbnail_maxres", "licensedContent", "locationDescription", "latitude", "longitude", "dislikeCount", "favoriteCount" )]

head(yoga)
colnames(yoga)
str(yoga)
```

```{r}
# Subset of publishedAtSQL into date and time

# Assuming 'yoga' is your dataframe
yoga$release_date <- substr(yoga$publishedAtSQL, 1, 10)  # Extract yyyy-mm-dd
yoga$release_time <- substr(yoga$publishedAtSQL, 12, 19) # Extract hh:mm:ss

# Convert release_date and release_time to appropriate formats
yoga$release_date <- as.Date(yoga$release_date)
yoga$release_time <- as.POSIXct(yoga$release_time, format = "%H:%M:%S")

# Remove the original publishedAtSQL column if no longer needed
# yoga <- yoga[, !colnames(yoga) %in% "publishedAtSQL"]

```

```{r}
# Extract time portion from release_time column
yoga$release_time <- format(yoga$release_time, "%H:%M:%S")

# Check the dataframe
head(yoga)



```

```{r}
# Convert duration in seconds to minutes and seconds format
yoga$duration <- sprintf("%02d:%02d", yoga$durationSec %/% 60, yoga$durationSec %% 60)

# Check the dataframe
head(yoga)

```

```{r}
# remove column durationSec

yoga <- yoga[, !colnames(yoga) %in% "durationSec"]

head(yoga)
skim(yoga)
```

```{r}
# Save the dataframe as a CSV file
write.csv(yoga, "youtube_yoga_with_kassandra_2024_03_16.csv", row.names = FALSE)

```
